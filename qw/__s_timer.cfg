////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                //
//                                    TIMER FOR RL / QUAD                                         //
//                                                                                                //
////////////////////////////////////////////////////////////////////////////////////////////////////

//BUGS

//TODO
// Armors?

// RESET
////////////////////////////////////////////////////////////////////////////////////////////////////
unalias_re ^stp\_timer\_$
unalias_re ^\_\.t\.(.+)$
unset_re ^\_\.t\.(.+)


// _.t. Vars
////////////////////////////////////////////////////////////////////////////////////////////////////
set ___.t.debug 0

set _.t.n "rl"

set _.t.int.rl 57
set _.t.int.rl.val 30
set _.t.int.quad 55
set _.t.int.quad.val 60

set _.t.int.i1 0
set _.t.int.i2 0
set _.t.int.i3 0
set _.t.int.i1.val 30
set _.t.int.i2.val 30
set _.t.int.i3.val 60

set _.t.int.u1 0
set _.t.int.u2 0
set _.t.int.d1 0
set _.t.int.d2 0
set _.t.int.early 0
set _.t.int.late 0
set _.t.int.kp 0

set _.t.str.map ""
set _.t.str.i1 ""
set _.t.str.i2 ""
set _.t.str.i3 ""
set _.t.str.kp1 ""
set _.t.str.kp2 ""
set_tp _.t.str.u1 ""
set_tp _.t.str.u2 ""
set_tp _.t.str.d1 ""
set_tp _.t.str.d2 ""
set_tp _.t.str.elate ""
set_tp _.t.str.eol ""

set_tp tp_name_late          "late"
set_tp tp_name_early         "early"
set_tp tp_name_ontime        "on$x20time"
set_tp tp_name_timer_rl      "{&cf31rl&cfff}"
set_tp tp_name_timer_rl-low  "{&cf31rl-low&cfff}"
set_tp tp_name_timer_rl-high "{&cf31rl-high&cfff}"
set_tp tp_name_timer_lg      "{&c29flg&cfff}"
set_tp tp_name_timer_gl      "{&c299gl&cfff}"
set_tp tp_name_timer_quad    "{&c05fquad&cfff}"


// _.t. Map specific vars
////////////////////////////////////////////////////////////////////////////////////////////////////
alias _.t.item.set "set _.t.str.i%1 %2; set _.t.int.i%1 %3; set _.t.int.i%1.val %4"
alias _.t.map.items "set _.t.str.map $mapname; if ('$mapname' == 'dm3') then _.t.map.dm3 else if ('$mapname' == 'dm2') then _.t.map.dm2 else if ('$mapname' == 'e1m2') then _.t.map.e1m2 else _.t.map.any"
alias _.t.map.dm3  "_.t.item.set 1 rl 0 30; _.t.item.set 2 lg 0 30; _.t.item.set 3 quad 0 60; _.t.item 1"
alias _.t.map.dm2  "_.t.item.set 1 rl-low 0 30; _.t.item.set 2 rl-high 0 30; _.t.item.set 3 quad 0 60; _.t.item 1"
alias _.t.map.e1m2  "_.t.item.set 1 rl 0 30; _.t.item.set 2 gl 0 30; _.t.item.set 3 quad 0 60; _.t.item 1"
alias _.t.map.any  "_.t.item.set 1 rl 0 30; _.t.item.set 2 lg 0 30; _.t.item.set 3 quad 0 60; _.t.item 1"


// _.t. Time
////////////////////////////////////////////////////////////////////////////////////////////////////
alias _.t.clamp          "if ($%1 >= 60) then set %1 0 else if ($%1 < 0) then set %1 59"
alias _.t.stoi           "set_calc %2 %1 * 1"
alias _.t.itos           "if (%1 < 10) then set %2 0%1 else set %2 %1"
alias _.t.itostp         "if (%1 < 10) then set %2 0%1 else set %2 %1"
alias _.t.debug          "echo &caaa$_.t.str.i%1(%1) | utime: $_.t.int.i%1 | kp1:$_.t.str.kp1 kp2:$_.t.str.kp2 | u:$_.t.int.u1/$_.t.int.u2 d:$_.t.int.d1/$_.t.int.d2 | e:$_.t.int.early l:$_.t.int.late"
alias _.t.debugn         "if ($___.t.debug > 0) then _.t.debug $_.t.n"

alias _.t.item           "if ('$mapname' != '$_.t.str.map') then _.t.map.items; set _.t.n %1; _.t.getn tmp; _.t.setn $tmp; _.t.kp.norm $tmp tmp; _.t.kp.set $tmp; wait; _.t.kp.echon; _.t.debugn"
alias _.t.set            "set tmp %2; _.t.clamp tmp; set _.t.int.i%1 $tmp; _.t.calcn; wait; "
alias _.t.setn           "_.t.set $_.t.n %1"
alias _.t.get            "set %2 $_.t.int.i%1"
alias _.t.getn           "_.t.get $_.t.n %1"
alias _.t.calc           "_.t.calc.up %1; _.t.calc.down %1; wait; _.t.calc.elate"
alias _.t.calcn          "_.t.calc $_.t.n"
alias _.t.calc.up        "set tmpcalc $_.t.int.i%1; set_calc _.t.int.u1 $tmpcalc % $_.t.int.i%1.val; set_calc _.t.int.u2 $_.t.int.u1 + $_.t.int.i%1.val"
alias _.t.calc.down      "set_calc tmpcalc 60 - $_.t.int.i%1; set_calc _.t.int.d2 $tmpcalc % $_.t.int.i%1.val; set_calc _.t.int.d1 $_.t.int.d2 + $_.t.int.i%1.val"
alias _.t.calc.elate     "set _.t.int.early $_.t.int.d2; set _.t.int.late $_.t.int.u1"

alias _.t.create.str     "_.t.create.str.eol; _.t.itostp $_.t.int.u1 _.t.str.u1; _.t.itostp $_.t.int.u2 _.t.str.u2; _.t.itostp $_.t.int.d1 _.t.str.d1; _.t.itostp $_.t.int.d2 _.t.str.d2; _.t.itostp $_.t.int.early _.t.str.early; _.t.itostp $_.t.int.late _.t.str.late"
alias _.t.create.str.eol "set_tp _.t.str.eol $qt$qt; set _.t.str.elate $qt$qt; if ($_.t.int.early == 0 AND $_.t.int.late == 0) then set_tp _.t.str.eol $tp_name_ontime else if ($_.t.int.early < $_.t.int.late) then set_tp _.t.str.eol $tp_name_early else set_tp _.t.str.eol $tp_name_late; if ($_.t.int.early < $_.t.int.late) then set _.t.str.elate $_.t.int.early else if ($_.t.int.late < $_.t.int.early) then set _.t.str.elate $_.t.int.late"

alias _.t.say            "_.t.kp.final; _.t.create.str; wait; .tsay.timer.$_.t.str.i%1 %1"
alias _.t.sayn           "_.t.say $_.t.n"


// _.t. Keypad
////////////////////////////////////////////////////////////////////////////////////////////////////
alias _.t.kp.norm   "if ($hud_gameclock_countdown > 0) then set_calc tmp 60 - %1; _.t.clamp tmp; set %2 $tmp"
alias _.t.kp.set    "set_calc tmp2 %1 % 10; set_calc tmp1 %1 - $tmp2; set_calc tmp1 $tmp1 / 10; set _.t.str.kp1 $tmp1; set _.t.str.kp2 $tmp2; _.t.kp.setint; _.t.kp.bind1"
alias _.t.kp.set1   "set _.t.str.kp1 %1; set _.t.str.kp2 ?; _.t.kp.bind2; _.t.kp.setint; wait; _.t.kp.echon"
alias _.t.kp.set2   "set _.t.str.kp2 %1; _.t.kp.bind1; _.t.kp.final; wait; _.t.kp.echon"
alias _.t.kp.setb   "set _.t.str.kp1 %1; set _.t.str.kp2 %2; _.t.kp.bind1; _.t.kp.final; wait; _.t.kp.echon"
alias _.t.kp.bind1  "bind kp_0 _.t.kp.set1 0; bind kp_1 _.t.kp.set1 1; bind kp_2 _.t.kp.set1 2; bind kp_3 _.t.kp.set1 3; bind kp_4 _.t.kp.set1 4; bind kp_5 _.t.kp.set1 5; bind kp_6 _.t.kp.setb 0 6; bind kp_7 _.t.kp.setb 0 7; bind kp_8 _.t.kp.setb 0 8; bind kp_9 _.t.kp.setb 0 9"
alias _.t.kp.bind2  "bind kp_0 _.t.kp.set2 0; bind kp_1 _.t.kp.set2 1; bind kp_2 _.t.kp.set2 2; bind kp_3 _.t.kp.set2 3; bind kp_4 _.t.kp.set2 4; bind kp_5 _.t.kp.set2 5; bind kp_6 _.t.kp.set2 6; bind kp_7 _.t.kp.set2 7; bind kp_8 _.t.kp.set2 8; bind kp_9 _.t.kp.set2 9"
alias _.t.kp.setint "_.t.stoi $_.t.str.kp1$_.t.str.kp2 _.t.int.kp"
alias _.t.kp.inc    "_.t.kp.setint; inc _.t.int.kp 1; _.t.clamp _.t.int.kp; wait; _.t.kp.set $_.t.int.kp; _.t.kp.norm $_.t.int.kp tmp; _.t.setn $tmp; _.t.kp.echon"
alias _.t.kp.dec    "_.t.kp.setint; inc _.t.int.kp -1; _.t.clamp _.t.int.kp; wait; _.t.kp.set $_.t.int.kp; _.t.kp.norm $_.t.int.kp tmp; _.t.setn $tmp; _.t.kp.echon"
alias _.t.kp.final  "_.t.kp.setint; _.t.kp.set $_.t.int.kp; _.t.kp.norm $_.t.int.kp tmp; _.t.setn $tmp"
alias _.t.kp.enter  "_.t.sayn; _.t.kp.echon; _.t.debugn"
alias _.t.kp.late   "_.t.kp.setint; _.t.setn $_.t.int.kp; _.t.kp.norm $_.t.int.kp tmp; _.t.kp.set $tmp; _.t.kp.enter"
alias _.t.kp.early  "_.t.kp.setint; set_calc tmp 60 - $_.t.int.kp; _.t.setn $tmp; if ($hud_gameclock_countdown > 0) then _.t.kp.set $_.t.int.kp else _.t.kp.set $tmp; _.t.kp.enter" 

alias _.t.kp.echo   "_.t.kp.echo2 $_.t.str.i%1 "
alias _.t.kp.echo2  "echo $tp_name_timer_%1 $_.t.str.kp1$_.t.str.kp2"
alias _.t.kp.echon  "_.t.kp.echo $_.t.n"


// .tsay. Teamsays
////////////////////////////////////////////////////////////////////////////////////////////////////
alias .tsay.timer.rl        ".tsay.timer.rlx $tp_name_timer_rl"
alias .tsay.timer.rl-low    ".tsay.timer.rlx $tp_name_timer_rl-low"
alias .tsay.timer.rl-high   ".tsay.timer.rlx $tp_name_timer_rl-high"
alias .tsay.timer.rlx       "say_team $\  %1 {&cfffis&r} $_.t.str.elate {&cfff$_.t.str.eol&r} {&c9f9:$_.t.str.u1/$_.t.str.u2&r} {&cfffor&r} {&cf99:$_.t.str.d1/$_.t.str.d2&r}"
alias .tsay.timer.lg        "say_team $\  $tp_name_timer_lg {&cfffis&r} $_.t.str.elate {&cfff$_.t.str.eol&r} {&c9f9:$_.t.str.u1/$_.t.str.u2&r} {&cfffor&r} {&cf99:$_.t.str.d1/$_.t.str.d2&r}"
alias .tsay.timer.quad      "say_team $\  $tp_name_timer_quad {&cfffis on&r} {&c9f9:$_.t.int.u1&r} {&cfffor&r} {&cf99:$_.t.int.d2&r}"
alias .tsay.timer.gl        "say_team $\  $tp_name_timer_gl {&cfffis&r} $_.t.str.elate {&cfff$_.t.str.eol&r} {&c9f9:$_.t.str.u1/$_.t.str.u2&r} {&cfffor&r} {&cf99:$_.t.str.d1/$_.t.str.d2&r}"


// init1 - Initialize the defaults
////////////////////////////////////////////////////////////////////////////////////////////////////
_.t.kp.bind1
_.t.map.items

// stp_timer aliases
////////////////////////////////////////////////////////////////////////////////////////////////////
alias stp_timer_item    "_.t.item %1"   // Activate %1 item, example bind x stp_timer_item rl
alias stp_timer_enter   "_.t.kp.enter"  // Finalize keypad entry and echo
alias stp_timer_inc     "_.t.kp.inc"    // Increase keypad entry by 1
alias stp_timer_dec     "_.t.kp.dec"    // Decrease keypad entry by 1
alias stp_timer_early   "_.t.kp.early"   // Finalize keypad and set item to x early
alias stp_timer_late    "_.t.kp.late"   // Finalize keypad and set item to x late
alias stp_timer_say     "_.t.sayn"      // say_team item time


// bind examples
////////////////////////////////////////////////////////////////////////////////////////////////////
bind kp_slash       "stp_timer_item 1"
bind kp_multiply    "stp_timer_item 2"
bind backspace      "stp_timer_item 3"
bind kp_enter       "stp_timer_enter"
//bind mwheelup       "stp_timer_inc"
//bind mwheeldown     "stp_timer_dec"
bind kp_plus        "stp_timer_early"
bind kp_minus       "stp_timer_late"
bind kp_del         "stp_timer_say"
